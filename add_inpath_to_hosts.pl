#!/usr/bin/perl

# Copyright (C) 2015  Jesse McGraw (jlmcgraw@gmail.com)
#
#-------------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see [http://www.gnu.org/licenses/].
#-------------------------------------------------------------------------------

#TODO

#DONE
#   ignore 0.0.0.0 addresses in input inpath file
#   use command line variables instead of hardcoded file names
#   ignore comments in input files
#   ignore address if it's exactly the same (not just in the same subnet)

# Standard libraries
use strict;
use warnings;
use autodie;
use Carp;

# use vars qw/ %opt /;
use Getopt::Std;
use Data::Dumper;

# Allow use of locally installed libraries in conjunction with Carton
use FindBin '$Bin';
use lib "$FindBin::Bin/local/lib/perl5";

# Non-standard libraries
use Modern::Perl '2015';
use Params::Validate qw(:all);
use NetAddr::IP;

exit main(@ARGV);

sub main {

    # An octet
    my $octetRegex = qr/(?: 25[0-5] | 2[0-4]\d | [01]?\d\d? )/mx;

    # An IP address is made of octets
    my $ipv4AddressRegex = qr/$octetRegex\.
                                $octetRegex\.
                                $octetRegex\.
                                $octetRegex/mx;

    # Test whether every IP in a HOSTS file lies within any INPATH interface subnet in a second file
    #
    # Pseudocode:
    # For each IP in HOST file
    #	For each INPATH entry in inpath list
    #		Is IP in INPATH subnet?
    #			Yes, add INPATH to existing description
    #			No, next INPATH entry

    use vars qw/ %opt /;

    my $opt_string = 'h:i:';

    my $arg_num = scalar @ARGV;

    if ( $arg_num != 2 ) {
        usage();
    }

    getopts( "$opt_string", \%opt )
        or usage();

    open( my $fh1, '<:encoding(UTF-8)', $opt{h} )
        or croak "Could not open hosts file '$opt{h}' $!";

    # Read in entire hosts file to array
    my @hosts = <$fh1>;
    close $fh1;

    # Read in entire file of inpath interfaces to array
    # This has to be previously generated by the script
    #  "inpath-interfaces-and-subnets-from-steelhead.pl"
    # Format: 10.80.242.53/29    ATWTAI-OFFCW01-inpath0_0
    open( my $fh2, '<:encoding(UTF-8)', $opt{i} )
        or croak "Could not open inpath file '$opt{i}' $!";
    my @inpaths = <$fh2>;
    close $fh2;

    # Create all of the inpath NetAddr objects
    # Iterate over each item/line in the inpaths array
    my %NetAddrObjects;

    foreach my $inpath_line (@inpaths) {

        # split the line into whitespace separated fields
        my @inpathfields = split /\s+/, $inpath_line;
        my $ip_and_mask = $inpathfields[0];

        # element zero in the line is address/netmask of an inpath interface
        # Create a NetAddr object for this entry
        $NetAddrObjects{$ip_and_mask} = NetAddr::IP->new("$ip_and_mask");
    }

    # Iterate over each item/line in the hosts array
    foreach my $hosts_line (@hosts) {

        # Skip blank lines
        next if ( $hosts_line =~ /^ \s* $/ix );

        # Skip lines that begin with "#" which are comments in the hosts file
        next if ( $hosts_line =~ /^ \s* \# /ix );

        # Skip lines that begin with 0.0.0.0
        next if ( $hosts_line =~ /^ \s* 0\.0\.0\.0 /ix );

        # skip entries for inpath interfaces
        next if ( $hosts_line =~ /-inpath\d_\d/ix );

        # Split the line into fields based on whitespace
        my @hostfields = split /\s+/, $hosts_line;

        unless ( $hostfields[0] ) {
            die "Problem with: $hosts_line";
        }

        # Host IP address is field 0
        my $HostIPAddress = NetAddr::IP->new("$hostfields[0]")
            or die "Bad host IP: $hostfields[0]";

        # Iterate over each item/line in the inpaths array
        foreach my $inpath_line (@inpaths) {

            # split the line into whitespace separated fields
            my @inpathfields = split /\s+/, $inpath_line;

            # Get our cached NetAddr object for this ip/mask
            my $InpathIPAddress = $NetAddrObjects{ $inpathfields[0] };

            croak unless $InpathIPAddress;

            # skip if this exact IP address is already in the host file
            next if ( $HostIPAddress->addr() eq $InpathIPAddress->addr() );

     # If host IP is within the subnet of the inpath interface print out a line
            if ( $HostIPAddress->within($InpathIPAddress) ) {

                # say "$hostfields[0]\t$hostfields[1]-$inpathfields[1]";
                printf( "%-20s $hostfields[1]-$inpathfields[1]\n",
                    $hostfields[0] );
            }
        }
    }
    return 0;
}

sub usage {
    say "Usage: $0 -h<hosts_file> -i<inpaths_file>";
    exit 1;
}
